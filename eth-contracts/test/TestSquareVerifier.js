// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var verifier = artifacts.require('Verifier');

const proof = require("../../zokrates/code/square/proof_3_9.json");


//Verifier.at(<verifier contract address>).verifyTx(A, A_p, B, B_p, C, C_p, H, K, [...publicInputs, ...outputs])


contract('Verifier', accounts => {

    const account = accounts[0];
    let contract;

    describe('match erc721 spec', function () {
        beforeEach(async function () {
            contract = await verifier.new({from: account});
        })

        it('should pass Test verification with correct proof', async function () {
            let result = await contract.verifyTx.call(
                proof.proof.A
                , proof.proof.A_p
                , proof.proof.B
                , proof.proof.B_p
                , proof.proof.C
                , proof.proof.C_p
                , proof.proof.H
                , proof.proof.K
                , proof.input
                );
            assert.equal(result,true,"Expected Verify Response was true!");
        })

        it('should fail Test verification with incorrect proof', async function () {
            let result = await contract.verifyTx.call(
                proof.proof.A
                , proof.proof.A_p
                , proof.proof.B
                , proof.proof.B_p
                , proof.proof.C
                , proof.proof.C_p
                , proof.proof.H
                , proof.proof.K
                , [3,9]
                );
            assert.equal(result,false,"Expected Verify Response was false!");
        })

    })
});

// Test verification with correct proof
// - use the contents from proof.json generated from zokrates steps


// Test verification with incorrect proof
